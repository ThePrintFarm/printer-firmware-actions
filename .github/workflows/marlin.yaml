name: Build Marlin Firmwares

on:
  workflow_call:
    inputs:
      marlin_branch:
        description: Marlin branch to use
        type: string
        required: false
        default: bugfix-2.1.x
      build_env:
        description: The build 'environment' to use
        required: false
        type: string
        default: "NONE"
      build_obj:
        description: The build object, or resulting firmware
        type: string
        required: false
        default: "NONE"
      config_dir:
        description: The directory holding your configs
        required: true
        type: string
      ini_dir:
        description: The directory holding custom ini files for platformio
        required: false
        type: string
        default: "NONE"
      platformio_config:
        description: The path and filename of the file to use as platformio.ini
        required: false
        type: string
        default: ""
      prefix:
        description: Firmware prefix
        required: true
        type: string
      artifact_key:
        description: Artifact name to use
        required: true
        type: string

jobs:
  build-marlin:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: pip
      - name: Install PlatformIO
        run: pip install platformio
      - name: Checkout Marlin
        run: git clone https://github.com/MarlinFirmware/Marlin ${{ inputs.build_env }}-${{ steps.date.outputs.tag }}
      - name: Copy configuration into place
        run: |
          set -x
          cp -av ${{ inputs.config_dir }}/*.h ${{ inputs.build_env }}-${{ steps.date.outputs.tag }}/Marlin/
          test "${{ inputs.ini_dir }}" != "NONE" && test -d ${{ inputs.ini_dir }} && cp -av ${{ inputs.ini_dir }}/*.ini ${{ inputs.build_env }}-${{ steps.date.outputs.tag }}/ini/ || echo > /dev/null
          set +x
      - name: Build Marlin Firmware (${{ inputs.config_dir }})
        run: |
          cd ${{ inputs.build_env }}-${{ steps.date.outputs.tag }}
          pio run ${{ inputs.build_env != 'NONE' && format('-e {0}', inputs.build_env) || '' }}
          mkdir -vp ${{ github.workspace }}/firmware
          ls -l .pio/build/${{ inputs.build_env }}/
          mv -v .pio/build/${{ inputs.build_env }}/${{ inputs.build_obj != 'NONE' && inputs.build_obj || 'firmware.bin' }} ${{ github.workspace }}/firmware/${{ inputs.prefix }}-${{ inputs.build_env }}-${{ steps.date.outputs.tag }}-${{ inputs.build_obj != 'NONE' && inputs.build_obj || 'firmware.bin' }}
          cd ..
          rm -rf ${{ inputs.build_env }}-${{ steps.date.outputs.tag }}
      - name: Cache the artifacts
        uses: actions/upload-artifact@master
        with:
          name: ${{ inputs.artifact_key }}
          path: ${{ github.workspace }}/firmware
